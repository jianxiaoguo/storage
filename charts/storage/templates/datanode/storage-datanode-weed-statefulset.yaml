{{- if eq .Values.global.storageLocation "on-cluster" }}
{{- $replicaCount := int .Values.datanode.weed.replicas }}
{{- $clusterDomain := .Values.global.clusterDomain }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: drycc-storage-datanode-weed
  labels:
    heritage: drycc
  annotations:
    component.drycc.cc/version: {{ .Values.imageTag }}
spec:
  serviceName: drycc-storage-datanode-weed
  replicas: {{ $replicaCount }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      component: drycc-storage
      app: drycc-storage-datanode-weed
  template:
    metadata:
      labels:
        component: drycc-storage
        app: drycc-storage-datanode-weed
    spec:
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.datanode.weed.podAffinityPreset.type "component" "" "extraMatchLabels" .Values.datanode.weed.podAffinityPreset.extraMatchLabels "topologyKey" "" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.datanode.weed.podAntiAffinityPreset.type "component" "" "extraMatchLabels" .Values.datanode.weed.podAntiAffinityPreset.extraMatchLabels "topologyKey" "" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.datanode.weed.nodeAffinityPreset.type "key" .Values.datanode.weed.nodeAffinityPreset.key "values" .Values.datanode.weed.nodeAffinityPreset.values ) | nindent 10 }}
      serviceAccount: drycc-storage
      initContainers:
      - name: drycc-storage-datanode-weed-init
        image: registry.drycc.cc/drycc/python-dev:latest
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        args:
        - netcat
        - -v
        - -a
        - {{ include "mainnode.weedUrls" . }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      containers:
      - name: drycc-storage-datanode-weed
        image: {{ .Values.imageRegistry }}/{{ .Values.imageOrg }}/storage:{{ .Values.imageTag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        args:
        - datanode
        - weed
        - -port=8080
        - -port.grpc=18080
        - -max=100
        - -rack=$(RACK)
        - -dataCenter=$(DATA_CENTER)
        - -mserver={{ include "mainnode.weedUrls" . }}
        {{- if and (.Values.datanode.weed.persistence.hdd.enabled) (.Values.datanode.weed.persistence.ssd.enabled) }}
        - -disk=hdd,ssd
        - -dir=/data/hdd,/data/ssd
        {{- else if .Values.datanode.weed.persistence.ssd.enabled }}
        - -disk=ssd
        - -dir=/data/ssd
        {{- else }}
        - -dir=/data/hdd
        {{- end }}
        - -metricsPort=9325
        env:
        - name: TZ
          value: UTC
        - name: RACK
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['topology.kubernetes.io/rack']
        - name: DATA_CENTER
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['topology.kubernetes.io/zone']
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8080
        - containerPort: 18080
        - containerPort: 9325
        startupProbe:
          httpGet:
            path: /metrics
            port: 9325
          initialDelaySeconds: 90
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: storage-config
          mountPath: /etc/seaweedfs
        {{- if .Values.datanode.weed.persistence.hdd.enabled }}
        - name: storage-datanode-weed-hdd
          mountPath: /data/hdd
        {{- end }}
        {{- if .Values.datanode.weed.persistence.ssd.enabled }}
        - name: storage-datanode-weed-ssd
          mountPath: /data/ssd
        {{- end }}
      volumes:
      - name: storage-config
        configMap:
          name: storage-config
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
  {{- if or (.Values.datanode.weed.persistence.hdd.enabled) (.Values.datanode.weed.persistence.ssd.enabled) }}
  volumeClaimTemplates:
  {{- if .Values.datanode.weed.persistence.hdd.enabled }}
  - metadata:
      name: storage-datanode-weed-hdd
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.datanode.weed.persistence.hdd.storageClass }}
      {{- if (eq "-" .Values.datanode.weed.persistence.hdd.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.datanode.weed.persistence.hdd.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.datanode.weed.persistence.hdd.size | quote }}
  {{- end }}
  {{- if .Values.datanode.weed.persistence.ssd.enabled }}
  - metadata:
      name: storage-datanode-weed-ssd
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.datanode.weed.persistence.ssd.storageClass }}
      {{- if (eq "-" .Values.datanode.weed.persistence.ssd.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.datanode.weed.persistence.ssd.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.datanode.weed.persistence.ssd.size | quote }}
  {{- end }}
  {{- end }}
{{- end }}
