{{- if eq .Values.global.storageLocation "on-cluster" }}
{{- $replicaCount := int .Values.datanode.weed.replicas }}
{{- $clusterDomain := .Values.global.clusterDomain }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: drycc-storage-datanode-weed
  labels:
    heritage: drycc
  annotations:
    component.drycc.cc/version: {{ .Values.imageTag }}
spec:
  serviceName: drycc-storage-datanode-weed
  replicas: {{ $replicaCount }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      component: drycc-storage
      app: drycc-storage-datanode-weed
  template:
    metadata:
      labels:
        component: drycc-storage
        app: drycc-storage-datanode-weed
    spec:
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.datanode.weed.podAffinityPreset.type "component" "" "extraMatchLabels" .Values.datanode.weed.podAffinityPreset.extraMatchLabels "topologyKey" "" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.datanode.weed.podAntiAffinityPreset.type "component" "" "extraMatchLabels" .Values.datanode.weed.podAntiAffinityPreset.extraMatchLabels "topologyKey" "" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.datanode.weed.nodeAffinityPreset.type "key" .Values.datanode.weed.nodeAffinityPreset.key "values" .Values.datanode.weed.nodeAffinityPreset.values ) | nindent 10 }}
      serviceAccount: drycc-storage
      initContainers:
      - name: drycc-storage-datanode-weed-init
        image: registry.drycc.cc/drycc/python-dev:latest
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        args:
        - netcat
        - -v
        - -a
        - {{ include "mainnode.weedUrls" . }}
      containers:
      - name: drycc-storage-datanode-weed
        image: {{ .Values.imageRegistry }}/{{ .Values.imageOrg }}/storage:{{ .Values.imageTag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.diagnosticMode.enabled }}
        command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 10 }}
        args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 10 }}
        {{- else }}
        command:
        - init-stack
        - bash
        - -ec
        - |
          # run weed shell
          CACERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          HEADER="Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
          KUBERNETES_API_URL="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/nodes/${NODE_NAME}"
          RACK=$(curl -sSL --cacert ${CACERT} --header "${HEADER}" -X GET "${KUBERNETES_API_URL}" | jq -r .metadata.labels.[\"topology.kubernetes.io/rack\"])
          DATA_CENTER=$(curl -sSL --cacert ${CACERT} --header "${HEADER}" -X GET "${KUBERNETES_API_URL}" | jq -r .metadata.labels.[\"topology.kubernetes.io/zone\"])
          boot datanode weed \
            -port=8080 \
            -port.grpc=18080 \
            -metricsPort=9325 \
            -max=100 \
            -rack=${RACK} \
            -dataCenter=${DATA_CENTER} \
            -mserver={{ include "mainnode.weedUrls" . }} \
            -compactionMBps={{ .Values.datanode.weed.compactionMBps }} \
            -dir=/data
        {{- end }}
        env:
        - name: TZ
          value: UTC
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - containerPort: 8080
        - containerPort: 18080
        - containerPort: 9325
        {{- if not .Values.diagnosticMode.enabled }}
        startupProbe:
          httpGet:
            path: /metrics
            port: 9325
          initialDelaySeconds: 90
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        {{- end }}
        volumeMounts:
        - name: storage-config
          mountPath: /etc/seaweedfs
        - name: storage-datanode-weed
          mountPath: /data
      volumes:
      - name: storage-config
        configMap:
          name: storage-config
      {{- if not (.Values.datanode.weed.persistence.enabled) }}
      - name: storage-datanode-weed
        emptyDir: {}
      {{- end }}
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
  {{- if .Values.datanode.weed.persistence.enabled}}
  volumeClaimTemplates:
  - metadata:
      name: storage-datanode-weed
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.datanode.weed.persistence.storageClass }}
      {{- if (eq "-" .Values.datanode.weed.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.datanode.weed.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.datanode.weed.persistence.size | quote }}
  {{- end }}
{{- end }}
